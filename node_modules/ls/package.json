{
  "name": "ls",
  "description": "Cleanly traverse directories in Coffeescript & Javascript",
  "author": {
    "name": "Awnist",
    "email": "hi@awnist.com",
    "url": "http://awnist.com"
  },
  "version": "0.0.2",
  "main": "./lib/ls",
  "repository": {
    "type": "git",
    "url": "http://github.com/awnist/ls.git"
  },
  "license": {
    "type": "Public Domain",
    "url": "http://unlicense.org/"
  },
  "readme": "## What's \"ls\"?\n\nls is a Coffeescript and Javascript module for cleanly traversing directories and listing files.\n\nIt has flexible and variable length arguments.\n\n## Overview\n\nFirst require:\n\n    ls = require \"ls\"\n\nThen we can be as sparse as\n\n    for file in ls \"/path\"\n        console.log file.name\n\nOr as elaborate as \n\n    ls [\"/path\", \"/another/path/\"], { recurse: true }, /jpg/, ->\n        console.log @name, \"is in\", @path, \"and is\", @stat.size\n\n## Usage\n\nThe only required argument is the initial path, the rest can be omitted.\n\n    ls [path/s], {config}, /file regex/, -> iterator function\n\nEach file produces an object with the following parameters:\n\n* path: The path to the file (/foo/bar/)\n* full: The path and file (/foo/bar/baz.jpg)\n* file: The file (baz.jpg)\n* name: The file without an extension (baz)\n* stat: A lazy loaded stat object from [fs.Stats](http://nodejs.org/api/fs.html#fs_class_fs_stats)\n\nYou can either grab the whole list\n\n    all_files = ls \"/path\"\n    for file in all_files\n        console.log file.name, \"is\", file.stat.size\n\nOr use an iterator function, with the context being the file's object\n\n    ls \"/path\", ->\n        console.log @name, \"is\", @stat.size\n\nThe {config} object accepts the following parameters:\n\n* recurse: Should we recurse into directories? (Boolean, default is false)\n* type: What kind of files should we return? (\"all\", \"dir\", \"file\", default is \"all\")\n\nThe /regex/ will only return matching files. All directories will still be recursed.\n\nThe -> iterator function is mostly a style preference, but can be handy if you need to throw an error and stop traversal. \n\n## Installation\n\nThe recommended way is through the excellent [npm](http://www.npmjs.org/):\n\n    $ npm install ls\n\nOtherwise, you can check it in your repository and then expose it:\n\n    $ git clone git://github.com/awnist/ls.git node_modules/ls/\n\nls is [UNLICENSED](http://unlicense.org/).\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/awnist/ls/issues"
  },
  "_id": "ls@0.0.2",
  "dist": {
    "shasum": "c3dd0fe70b11964c0e690826a7bc03a72897d648"
  },
  "_from": "ls@",
  "_resolved": "https://registry.npmjs.org/ls/-/ls-0.0.2.tgz"
}
